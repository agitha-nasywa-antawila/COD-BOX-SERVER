// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        String    @id @default(cuid())
  name      String    @unique
  user      User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model User {
  id                String          @id @default(uuid())
  username          String          @unique
  email             String          @unique
  password          String
  passwordUpdatedAt DateTime
  accountIsVerified Boolean         @default(false)
  emailIsVerified   Boolean         @default(false)
  token             String?         @unique
  tokenExpiredAt    DateTime?
  tokenType         TOKEN_TYPE?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime?       @updatedAt
  role              Role            @relation(fields: [roleId], references: [id])
  order             Order[]         @relation(name: "order") // Untuk Orang Yang Melakukan Order Barang
  takeOrder         Order[]         @relation(name: "takeOrder") // Untuk Kurir Yang Ngambil Barang
  roleId            String
  profil            Profil?
  OrderTimeline     OrderTimeline[]
}

model Profil {
  id        String   @id @default(cuid())
  full_name String?
  photo     String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Device {
  id             String    @id @default(cuid())
  name           String?
  kode           String    @unique
  token          String?
  tokenExpiredAt DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  order          Order[]
}

model Order {
  id              String          @id @default(cuid())
  resi            String          @unique
  nomor_pesanan   String          @unique
  harga_barang    String
  tipe_pembayaran TIPE_PEMBAYARAN
  createdAt       DateTime        @default(now())
  updatedAt       DateTime?       @updatedAt

  Owner         User?           @relation(fields: [ownerId], references: [id], name: "order")
  ownerId       String?
  Kurir         User?           @relation(fields: [kurirId], references: [id], name: "takeOrder")
  kurirId       String?
  OrderTimeline OrderTimeline[]
  Device        Device?         @relation(fields: [deviceId], references: [id])
  deviceId      String?
}

model OrderTimeline {
  id              String         @id @default(cuid())
  order           Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String
  kategori        OrderKategori? @relation(fields: [orderKategoriId], references: [id], onDelete: SetNull)
  orderKategoriId String?
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  value           String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model OrderKategori {
  id            String          @id @default(cuid())
  sequence      String          @unique
  name          String          @unique
  OrderTimeline OrderTimeline[]
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?       @updatedAt
}

enum TOKEN_TYPE {
  RESET_TOKEN
  VERIFICATION_TOKEN
}

enum TIPE_PEMBAYARAN {
  COD
  ONLINE
}
